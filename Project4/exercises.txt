Option chose: Option 1
Question 1: Explain how to avoid starvation in your implementation:
Answer: I avoided starvation within my program by adhering to the logic presented in the slides about cat semaphore implementation.  When cats and mice are done with their dishes and leaving the kitchen, they signal the opposite queue if there are members of that queue waiting, if not, then it continues with checking if the members of the same animal are waiting, and signals them if needed.  This leads to fairness and avoids starvation, as each of the waiting members are signaled and allowed to eat at some point.
Question 2: Comment on your experience of implementing the Cats-and-Mice program.  Can you derive any principles about the use of the lock and condition variable synchronization primatives?
Answer:  At first, I was pretty lost in how to implement the program, however, when I went through and looked at all the lecture slides on the semaphore implementation, it helped me a lot in figuring out the logic and how to implement each part correctly.  Suprisingly, the part that I had the most trouble with was definetley that of the for an while loops.  After implementing the algorithms I could not figure out why my program was not exiting.  After hours of trying to figure out what was wrong, I found out that i was initializing i = 0 within the while loop, which was messing up my entire program.  I had a similar problem with declaring i within the for loops in my original implementation, which I also had to change as it did not work with the compiler version that we use for the class.
As for semaphore primatives, this program actually helped me to understand them a lot better.  The basic principles of semaphore synchronization primatives is that we can use semaphores to control the access of a shared resource to ensure that each of the processes has access to the resources.  Semaphores are initialixed to manage the availability of the resources and signal between the threads, making sure to avoid deadlock and race conditions.
